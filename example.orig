#include <cstddef>  // for NULL
#include <vector>
#include <memory>   // for auto_ptr

class Base {
public:
  virtual int method(int* val_ptr) const {
    return (val_ptr != NULL ? *val_ptr : 0);
  }
};

class Derived : public Base {
public:
  int method(int* val_ptr) const {
    return (val_ptr != NULL ? *val_ptr : 1);
  }
};

int func()
{
  std::auto_ptr<Base> base_hold(new Derived());

  std::vector<Base> vec;

  for (int i=0; i<5; ++i) {
    vec.push_back(Base());
  }

  for (std::vector<Base>::const_iterator it = vec.begin(), endIt = vec.end(); it != endIt ; ++it) {
    it->method(NULL);
  }
}
